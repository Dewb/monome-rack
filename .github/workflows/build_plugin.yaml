name: Build VCV Rack Plugin
on: [push, pull_request]

env:
  rack-sdk-version: 2.2.2

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    defaults:
      run:
        shell: ${{ matrix.config.shell }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: Linux,
            os: ubuntu-latest,
            shell: bash,
            sdk-postfix: "lin-x64",
            prepare-os: "sudo apt update; sudo apt install -y libglu-dev"
          }
        - {
            name: MacOS x64,
            os: macos-latest,
            shell: bash,
            sdk-postfix: "mac-x64",
            prepare-os: "find /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs -iname *.sdk"
          }
        - {
            name: Windows,
            os: windows-latest,
            shell: bash,
            sdk-postfix: "win-x64",
            prepare-os: "choco install wget --no-progress"
          }
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Fetch submodule tags and contents
        run: |
          git submodule foreach --recursive 'git fetch --tags'
          git submodule update --init --recursive
      - name: Get Rack-SDK
        run: |
          pushd $HOME
          wget -c -O Rack-SDK.zip https://vcvrack.com/downloads/Rack-SDK-${{ env.rack-sdk-version }}-${{ matrix.config.sdk-postfix }}.zip
          unzip Rack-SDK.zip
      - name: Windows - patch plugin.mk to use 7zip
        if: runner.os == 'Windows'
        run: |
          sed -i 's/zip -q -9 -r/7z a -tzip -mx=9/' $HOME/Rack-SDK/plugin.mk
      #- name: Patch Makefile to use old glibc versions on Linux
      #  if: runner.os == 'Linux'
      #  run: |
      #    echo "FLAGS += -include force_link_glibc_2.23.h" >> Makefile
      - name: Modify plugin version
        # only modify plugin version if no tag was created
        if: "! startsWith(github.ref, 'refs/tags/v')"
        run: |
          gitrev=`git rev-parse --short HEAD`
          pluginversion=`jq -r '.version' plugin.json`
          echo "Set plugin version from $pluginversion to $pluginversion-$gitrev"
          cat <<< `jq --arg VERSION "$pluginversion-$gitrev" '.version=$VERSION' plugin.json` > plugin.json
      - name: Build plugin
        run: |
          ${{ matrix.config.prepare-os }}
          export RACK_DIR=$HOME/Rack-SDK
          make -j dep
          make -j dist
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          path: dist
          name: ${{ matrix.config.name }}

  publish:
    name: Publish plugin
    # only create a release if a tag was created that is called e.g. v1.2.3
    # see also https://vcvrack.com/manual/Manifest#version
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - uses: FranzDiebold/github-env-vars-action@v1.2.1
      - name: Check if plugin version matches tag
        run: |
          pluginversion=`jq -r '.version' plugin.json`
          if [ "v$pluginversion" != "${{ env.GITHUB_REF_NAME }}" ]; then
            echo "Plugin version from plugin.json 'v$pluginversion' doesn't match with tag version '${{ env.GITHUB_REF_NAME }}'"
            exit 1
          fi
      - name: Create Release
        uses: actions/create-release@v1
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: |
            ${{ env.GITHUB_REPOSITORY_NAME }} VCV Rack Plugin ${{ env.GITHUB_REF_NAME }}
          draft: true
          prerelease: true
      - uses: actions/download-artifact@v2
        with:
          path: _artifacts
      - name: Upload release assets
        uses: svenstaro/upload-release-action@v2
        with:
          overwrite: true
          prerelease: true
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: _artifacts/**/*.vcvplugin
          tag: ${{ github.ref }}
          file_glob: true
